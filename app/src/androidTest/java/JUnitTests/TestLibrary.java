package JUnitTests;

import android.content.Context;
import android.content.SharedPreferences;
import android.location.Location;
import android.media.MediaMetadataRetriever;
import android.net.Uri;
import android.support.test.InstrumentationRegistry;

import com.cse110.team28.flashbackmusicplayer.Album;
import com.cse110.team28.flashbackmusicplayer.Library;
import com.cse110.team28.flashbackmusicplayer.R;
import com.cse110.team28.flashbackmusicplayer.Track;

import org.junit.Test;

import java.lang.reflect.Field;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Collections;

import static android.content.Context.MODE_PRIVATE;
import static junit.framework.Assert.assertEquals;

/**
 * Created by Youyuan Lu on 2/17/2018.
 */

public class TestLibrary {

    private Context context = InstrumentationRegistry.getTargetContext();

    @Test
    public void testGenerateLibrary() {
        ArrayList<Track> tracksInLib = new ArrayList<Track>();
        ArrayList<Track> tracksInRaw = new ArrayList<Track>();

        // Get the track list generated by generateLibrary and store it in tracksInLib
        Library.loadSamples(context, null);
        for (Album album : Library.getAlbum()) {
            for (Track track : album.getTrackList()) {
                tracksInLib.add(track);
            }
        }

        // Get the track list directly from the /res/raw and store it in tracksInRaw
        Field[] fields = R.raw.class.getFields();
        for (Field field : fields){
            Uri uri = Uri.parse("android.resource://" + context.getPackageName() + "/" +
                    context.getResources().getIdentifier(field.getName(), "raw", context.getPackageName()));
            MediaMetadataRetriever md = new MediaMetadataRetriever();
            md.setDataSource(context, uri);
            Track track = new Track();
            track.setMd(md);
            tracksInRaw.add(track);
        }

        // sort tracksInLib and tracksInRow and check if they are the same
        assertEquals(tracksInLib.size(), tracksInRaw.size());
        Collections.sort(tracksInLib);
        Collections.sort(tracksInRaw);
        for (int i = 0; i < tracksInLib.size(); i++) {
            assertEquals(true, tracksInLib.get(i).equals(tracksInRaw.get(i)));
        }
    }

    @Test
    public void testSave() {
        // create a track with complete info and test Save using it
        Track track = new Track();
        track.setMedia("testTrack");
        track.setFavorite(1);

        Location location = new Location("");
        location.setLatitude(1.23);
        location.setLongitude(4.56);
        LocalDateTime dateTime = LocalDateTime.of(2018, 2, 15, 16, 45);
        track.setLog(location, dateTime);

        Library.save(context, track);
        SharedPreferences sp = context.getSharedPreferences(track.getAlbum()+"_"+track.getTitle(), MODE_PRIVATE);
        int spfav = sp.getInt("fav", 0);
        String splog = sp.getString("log", "");

        assertEquals(track.getFavorite(), spfav);
        String logstr = location.getLatitude() + "@" + location.getLongitude() + "@" + dateTime.toString();
        assertEquals(logstr, splog);
        sp.edit().clear().commit();

        // create a track whose Location is null and test Save using it
        track.setLog(null, dateTime);
        Library.save(context, track);
        sp = context.getSharedPreferences(track.getAlbum() + "_" + track.getTitle(), MODE_PRIVATE);
        splog = sp.getString("log", "");
        logstr = "-200@-200@" + dateTime.toString();
        assertEquals(logstr, splog);
        sp.edit().clear().commit();
    }
}